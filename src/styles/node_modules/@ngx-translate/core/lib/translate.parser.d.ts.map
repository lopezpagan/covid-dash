{"version":3,"file":"translate.parser.d.ts","sources":["/Users/lopezpagan/REPO/bitbucket/devxlab/betel.app/node_modules/@ngx-translate/core/lib/translate.parser.d.ts"],"sourcesContent":["export declare abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     */\n    abstract getValue(target: any, key: string): any;\n}\nexport declare class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp;\n    interpolate(expr: string | Function, params?: any): string;\n    getValue(target: any, key: string): any;\n    private interpolateFunction;\n    private interpolateString;\n}\n"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;"}